import React, { useState } from 'react';
import {
  View,
  Text,
  Button,
  StyleSheet,
  Alert,
  Share,
  FlatList,
  TouchableOpacity,
  Platform,
  PermissionsAndroid,
  NativeModules,
  ActivityIndicator,
  SafeAreaView,
} from 'react-native';
import RNFS from 'react-native-fs';
import { useNavigation } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../navigation/AppNavigator';
import WineRecordService from '../services/WineRecordService';
import { WineRecord } from '../constants/WineRecord';
import Logo from '../components/Logo';
import JSZip from 'jszip';

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤
const { FileShareModule } = NativeModules;

type ExportImportScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'ExportImport'>;

interface FileItem {
  name: string;
  path: string;
  isZip?: boolean;
}

interface FolderItem {
  name: string;
  path: string;
  id: string; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
const FolderListView = ({
  folders,
  onFolderSelect,
  onCancel,
}: {
  folders: FolderItem[];
  onFolderSelect: (folder: FolderItem) => void;
  onCancel: () => void
}) => (
  <View style={styles.folderListContainer}>
    <Text style={styles.subHeader}>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞</Text>
    <FlatList
      data={folders}
      keyExtractor={(item) => item.id}
      renderItem={({ item }) => (
        <TouchableOpacity
          style={styles.folderItem}
          onPress={() => onFolderSelect(item)}
        >
          <Text style={styles.folderName}>{item.name}</Text>
        </TouchableOpacity>
      )}
    />
    <View style={styles.buttonContainer}>
      <Button
        title="–û—Ç–º–µ–Ω–∞"
        onPress={onCancel}
        color="#E74C3C"
      />
    </View>
  </View>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
const FileListView = ({
  files,
  selectedFolder,
  onFileSelect,
  onBack,
  onCancel,
}: {
  files: FileItem[];
  selectedFolder: FolderItem | null;
  onFileSelect: (filePath: string) => void;
  onBack: () => void;
  onCancel: () => void
}) => (
  <View style={styles.fileListContainer}>
    <Text style={styles.subHeader}>
      –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
      {selectedFolder ? ` –∏–∑ ${selectedFolder.name}` : ''}
    </Text>
    <Text style={styles.importHint}>
      –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å ZIP-—Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    </Text>
    <FlatList
      data={files}
      keyExtractor={(item, index) => `${item.path}_${index}`}
      renderItem={({ item }) => (
        <TouchableOpacity
          style={[
            styles.fileItem,
            item.isZip && styles.zipFileItem,  // –í—ã–¥–µ–ª—è–µ–º ZIP-—Ñ–∞–π–ª—ã
          ]}
          onPress={() => onFileSelect(item.path)}
        >
          <Text style={[
            styles.fileName,
            item.isZip && styles.zipFileName,  // –°—Ç–∏–ª—å –¥–ª—è ZIP-—Ñ–∞–π–ª–æ–≤
          ]}>
            {item.isZip ? 'üì¶ ' : 'üìÑ '}{item.name}
            {item.isZip && ' (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'}
          </Text>
        </TouchableOpacity>
      )}
    />
    <View style={styles.buttonContainer}>
      <Button
        title="–ù–∞–∑–∞–¥ –∫ –ø–∞–ø–∫–∞–º"
        onPress={onBack}
        color="#3498DB"
      />
    </View>
    <View style={styles.buttonContainer}>
      <Button
        title="–û—Ç–º–µ–Ω–∞"
        onPress={onCancel}
        color="#E74C3C"
      />
    </View>
  </View>
);

const ExportImportScreen = () => {
  const navigation = useNavigation<ExportImportScreenNavigationProp>();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –∏–º–ø–æ—Ä—Ç–∞
  const [showFolderList, setShowFolderList] = useState(false);
  const [folders, setFolders] = useState<FolderItem[]>([]);
  const [selectedFolder, setSelectedFolder] = useState<FolderItem | null>(null);
  const [showFileList, setShowFileList] = useState(false);
  const [files, setFiles] = useState<FileItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  /**
   * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ (–¥–ª—è Android)
   */
  const requestStoragePermission = async (): Promise<boolean> => {
    if (Platform.OS !== 'android')
      {return true;}
    try {
      if (Platform.Version >= 33) {
        // Android 13+ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        const granted = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGES,
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_AUDIO,
        ]);

        return Object.values(granted).every(
          status => status === PermissionsAndroid.RESULTS.GRANTED
        );
      } else {
        // Android 12 –∏ –Ω–∏–∂–µ
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º',
            message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞/–∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
            buttonNeutral: '–°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ',
            buttonNegative: '–û—Ç–º–µ–Ω–∞',
            buttonPositive: 'OK',
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', err);
      return false;
    }
  };

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  const prepareExportData = async (records: WineRecord[]): Promise<{ data: any[], images: { uri: string, name: string }[] }> => {
    const imagesToExport: { uri: string, name: string }[] = [];

    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
    const exportData = JSON.parse(JSON.stringify(records));

    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    for (let i = 0; i < exportData.length; i++) {
      const record = exportData[i];

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –±—É—Ç—ã–ª–∫–∏
      if (record.bottlePhoto) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º .jpg –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const extension = record.bottlePhoto.includes('.')
          ? record.bottlePhoto.substring(record.bottlePhoto.lastIndexOf('.'))
          : '.jpg';
        const fileName = `bottle_${i}_${new Date().getTime()}${extension}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        imagesToExport.push({
          uri: record.bottlePhoto,
          name: fileName,
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        exportData[i].bottlePhoto = `exported_images/${fileName}`;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —ç—Ç–∏–∫–µ—Ç–∫–∏
      if (record.labelPhoto) {
        const extension = record.labelPhoto.includes('.')
          ? record.labelPhoto.substring(record.labelPhoto.lastIndexOf('.'))
          : '.jpg';
        const fileName = `label_${i}_${new Date().getTime()}${extension}`;

        imagesToExport.push({
          uri: record.labelPhoto,
          name: fileName,
        });

        exportData[i].labelPhoto = `exported_images/${fileName}`;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–æ–Ω—Ç—Ä—ç—Ç–∏–∫–µ—Ç–∫–∏
      if (record.backLabelPhoto) {
        const extension = record.backLabelPhoto.includes('.')
          ? record.backLabelPhoto.substring(record.backLabelPhoto.lastIndexOf('.'))
          : '.jpg';
        const fileName = `backlabel_${i}_${new Date().getTime()}${extension}`;

        imagesToExport.push({
          uri: record.backLabelPhoto,
          name: fileName,
        });

        exportData[i].backLabelPhoto = `exported_images/${fileName}`;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø–ª–∞–∫–µ—Ç–∫–∏
      if (record.plaquePhoto) {
        const extension = record.plaquePhoto.includes('.')
          ? record.plaquePhoto.substring(record.plaquePhoto.lastIndexOf('.'))
          : '.jpg';
        const fileName = `plaque_${i}_${new Date().getTime()}${extension}`;

        imagesToExport.push({
          uri: record.plaquePhoto,
          name: fileName,
        });

        exportData[i].plaquePhoto = `exported_images/${fileName}`;
      }
    }

    return { data: exportData, images: imagesToExport };
  };

  /**
   * –°–æ–∑–¥–∞–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ JSON –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
   */
  const exportAsZipArchive = async (exportDir: string, jsonPath: string, imagesPaths: string[]): Promise<string> => {
    try {
      const zip = new JSZip();

      // –î–æ–±–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª
      const jsonContent = await RNFS.readFile(jsonPath, 'utf8');
      zip.file('WineTastingData.json', jsonContent);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagesFolder = zip.folder('exported_images');

      if (imagesFolder) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for (const imagePath of imagesPaths) {
          try {
            const imageName = imagePath.substring(imagePath.lastIndexOf('/') + 1);
            const imageExists = await RNFS.exists(imagePath);

            if (imageExists) {
              const imageContent = await RNFS.readFile(imagePath, 'base64');
              imagesFolder.file(imageName, imageContent, { base64: true });
              console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${imageName} –≤ ZIP`);
            } else {
              console.warn(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP: ${imagePath}`);
            }
          } catch (imgError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ZIP:', imgError);
          }
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ZIP-—Ñ–∞–π–ª
      const zipContent = await zip.generateAsync({ type: 'base64' });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ZIP-—Ñ–∞–π–ª
      const zipPath = `${exportDir}/WineTastingExport.zip`;
      await RNFS.writeFile(zipPath, zipContent, 'base64');

      return zipPath;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤');
    }
  };

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: —Å–æ–∑–¥–∞—ë—Ç ZIP-–∞—Ä—Ö–∏–≤ —Å JSON-—Ñ–∞–π–ª–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
   */
  const handleExportWithPhotos = async () => {
    try {
      setIsLoading(true);
      const recordsToExport = WineRecordService.getRecords();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Android
      if (Platform.OS === 'android') {
        const hasPermission = await requestStoragePermission();
        if (!hasPermission) {
          Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
          setIsLoading(false);
          return;
        }
      }

      if (recordsToExport.length === 0) {
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        setIsLoading(false);
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const { data, images } = await prepareExportData(recordsToExport);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
      const timestamp = new Date().getTime();
      const exportDirName = `WineTasting_${timestamp}`;
      const exportDir = Platform.OS === 'android'
        ? `${RNFS.DownloadDirectoryPath}/${exportDirName}`
        : `${RNFS.DocumentDirectoryPath}/${exportDirName}`;

      // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      await RNFS.mkdir(exportDir);

      // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagesDir = `${exportDir}/exported_images`;
      await RNFS.mkdir(imagesDir);

      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let failedImages = 0;
      const successfulImagePaths: string[] = [];

      for (const image of images) {
        try {
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const sourceUri = image.uri.replace('file://', '');
          const targetPath = `${imagesDir}/${image.name}`;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URI
          const fileExists = await RNFS.exists(sourceUri);
          if (fileExists) {
            await RNFS.copyFile(sourceUri, targetPath);
            successfulImagePaths.push(targetPath);
            console.log(`–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${image.name}`);
          } else {
            failedImages++;
            console.warn(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sourceUri}`);
          }
        } catch (copyError) {
          failedImages++;
          console.error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${image.name}:`, copyError);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏
      const jsonFileName = 'WineTastingData.json';
      const jsonPath = `${exportDir}/${jsonFileName}`;
      await RNFS.writeFile(jsonPath, JSON.stringify(data, null, 2), 'utf8');

      if (failedImages > 0) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ${failedImages} –∏–∑ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      }

      // –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
      const zipPath = await exportAsZipArchive(exportDir, jsonPath, successfulImagePaths);

      // –°–æ–∑–¥–∞–µ–º HTML —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
      const htmlPath = `${exportDir}/README.html`;
      const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
          h1 { color: #722F37; }
          .info { background: #f9f9f9; padding: 15px; border-left: 4px solid #722F37; }
        </style>
      </head>
      <body>
        <h1>–î–∞–Ω–Ω—ã–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫</h1>
        <div class="info">
          <p>–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.</p>
          <p><strong>WineTastingData.json</strong> - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON</p>
          <p><strong>/exported_images/</strong> - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –∑–∞–ø–∏—Å–∏</p>
          <p><strong>WineTastingExport.zip</strong> - –∞—Ä—Ö–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π JSON –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
          <p>–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–º–ø–æ—Ä—Ç–∞.</p>
        </div>
      </body>
      </html>
      `;
      await RNFS.writeFile(htmlPath, htmlContent, 'utf8');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ
      const messageText = failedImages > 0
        ? `–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É:\n${exportDir}\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${failedImages} –∏–∑ ${images.length}).\n\n–°–æ–∑–¥–∞–Ω ZIP-–∞—Ä—Ö–∏–≤ —Å JSON –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.`
        : `–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–∞–ø–∫—É:\n${exportDir}\n\n–°–æ–∑–¥–∞–Ω ZIP-–∞—Ä—Ö–∏–≤ —Å JSON –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.`;

      Alert.alert(
        '–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω',
        messageText
      );

      // –®–∞—Ä–∏–º ZIP-–∞—Ä—Ö–∏–≤
      if (Platform.OS === 'android') {
        try {
          if (FileShareModule) {
            await FileShareModule.shareFile(
              zipPath,
              'application/zip',
              '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –æ –≤–∏–Ω–∞—Ö'
            );
          } else {
            // –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö Android –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            const fileUri = zipPath.startsWith('file://') ? zipPath : `file://${zipPath}`;

            const result = await Share.share({
              title: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–Ω–∞—Ö (ZIP)',
              message: '–ü—Ä–∏–∫—Ä–µ–ø–ª—è—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–Ω–∞—Ö',
              url: fileUri, // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä url
            }, {
              dialogTitle: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º —Å –¥–∞–Ω–Ω—ã–º–∏',
              subject: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–Ω–∞—Ö',
            });

            if (result.action === Share.sharedAction) {
              console.log('Shared successfully');
            }
          }
        } catch (shareError) {
          console.error('Android share error:', shareError);

          // –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          // –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
          Alert.alert(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ',
            `ZIP-–∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n${zipPath}\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.`
          );
        }
      } else {
        // –î–ª—è iOS
        try {
          await Share.share({
            url: zipPath.startsWith('file://') ? zipPath : `file://${zipPath}`,
            title: '–î–∞–Ω–Ω—ã–µ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ (ZIP)',
          }, {
            subject: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–Ω–∞—Ö',
            excludedActivityTypes: [
              'com.apple.UIKit.activity.Print',
              'com.apple.UIKit.activity.AssignToContact',
            ],
          });
        } catch (shareError) {
          console.error('iOS share error:', shareError);
          Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ', `ZIP-–∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n${zipPath}`);
        }
      }
    } catch (error) {
      console.error('General export error:', error);
      Alert.alert('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  const handleExportSelected = () => {
    const records = WineRecordService.getRecords();
    if (records.length === 0) {
      Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }
    navigation.navigate('ExportSelect');
  };

  /**
   * –í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
   */
  const getBaseDirectory = (): string => {
    if (Platform.OS === 'android') {
      // –ù–∞ Android –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ Downloads
      return RNFS.ExternalStorageDirectoryPath;
    } else {
      // –ù–∞ iOS –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      return RNFS.DocumentDirectoryPath;
    }
  };

  /**
   * –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
   */
  const extractZipArchive = async (zipPath: string, extractDir: string): Promise<{jsonPath: string, imagesDir: string}> => {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
      await RNFS.mkdir(extractDir);

      // –ß–∏—Ç–∞–µ–º ZIP —Ñ–∞–π–ª
      const zipData = await RNFS.readFile(zipPath, 'base64');
      const zip = new JSZip();
      await zip.loadAsync(zipData, { base64: true });

      // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagesDir = `${extractDir}/exported_images`;
      await RNFS.mkdir(imagesDir);

      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º JSON
      let jsonPath = '';
      const jsonFile = zip.file('WineTastingData.json');
      if (jsonFile) {
        const jsonContent = await jsonFile.async('string');
        jsonPath = `${extractDir}/WineTastingData.json`;
        await RNFS.writeFile(jsonPath, jsonContent, 'utf8');
      }

      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageFiles = zip.folder('exported_images');
      if (imageFiles) {
        const imageFileObjects = imageFiles.files;
        for (const filePath in imageFileObjects) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
          if (filePath === 'exported_images/' || imageFileObjects[filePath].dir) {
            continue;
          }

          const fileName = filePath.replace('exported_images/', '');
          const fileData = await imageFileObjects[filePath].async('base64');
          const outputPath = `${imagesDir}/${fileName}`;

          await RNFS.writeFile(outputPath, fileData, 'base64');
          console.log(`–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω —Ñ–∞–π–ª: ${fileName}`);
        }
      }

      return { jsonPath, imagesDir };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ZIP:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å ZIP-–∞—Ä—Ö–∏–≤');
    }
  };

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –∏–∑ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
   */
  const handleSelectFolder = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Android
      if (Platform.OS === 'android') {
        const hasPermission = await requestStoragePermission();
        if (!hasPermission) {
          Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
          return;
        }
      }

      const basePath = getBaseDirectory();

      try {
        const dirItems = await RNFS.readDir(basePath);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        const currentDir: FolderItem = {
          name: '–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è',
          path: basePath,
          id: 'current_dir',
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π
        let downloadDir: FolderItem | null = null;
        if (Platform.OS === 'android' && RNFS.DownloadDirectoryPath !== basePath) {
          downloadDir = {
            name: '–ó–∞–≥—Ä—É–∑–∫–∏',
            path: RNFS.DownloadDirectoryPath,
            id: 'download_dir',
          };
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º ID
        const folderItems = dirItems
          .filter(item => item.isDirectory())
          .map((item, index) => ({
            name: item.name,
            path: item.path,
            id: `dir_${index}_${item.name}`,
          }));

        // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        let allFolders: FolderItem[] = [currentDir];

        if (downloadDir) {
          allFolders.push(downloadDir);
        }

        allFolders = [...allFolders, ...folderItems];

        if (allFolders.length === 0) {
          Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–í –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫');
        } else {
          setFolders(allFolders);
          setShowFolderList(true);
        }
      } catch (error) {
        console.error('Error reading directory:', error);

        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
        if (Platform.OS === 'android') {
          try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
            const downloadDirItems = await RNFS.readDir(RNFS.DownloadDirectoryPath);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON –∏ ZIP —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫
            const hasImportableFiles = downloadDirItems.some(item =>
              item.isFile() && (item.name.toLowerCase().endsWith('.json') || item.name.toLowerCase().endsWith('.zip'))
            );

            const downloadDir: FolderItem = {
              name: hasImportableFiles ? '–ó–∞–≥—Ä—É–∑–∫–∏ (–µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞)' : '–ó–∞–≥—Ä—É–∑–∫–∏',
              path: RNFS.DownloadDirectoryPath,
              id: 'download_dir',
            };

            setFolders([downloadDir]);
            setShowFolderList(true);
          } catch (downloadError) {
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
          }
        } else {
          Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫');
        }
      }
    } catch (mainError) {
      console.error('Main directory error:', mainError);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫');
    }
  };

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
   * –§–∏–ª—å—Ç—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JSON –∏ ZIP —Ñ–∞–π–ª—ã.
   */
  const handleLoadFilesFromFolder = async (folder: FolderItem) => {
    try {
      const items = await RNFS.readDir(folder.path);

      // –§–∏–ª—å—Ç—Ä—É–µ–º ZIP –∏ JSON —Ñ–∞–π–ª—ã
      const zipFiles = items
        .filter(item => item.isFile() && item.name.toLowerCase().endsWith('.zip'))
        .map(item => ({
          name: item.name,
          path: item.path,
          isZip: true,
        }));

      const jsonFiles = items
        .filter(item => item.isFile() && item.name.toLowerCase().endsWith('.json'))
        .map(item => ({
          name: item.name,
          path: item.path,
          isZip: false,
        }));

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—è ZIP —Ñ–∞–π–ª—ã
      const importableFiles = [...zipFiles, ...jsonFiles];

      if (importableFiles.length === 0) {
        Alert.alert('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ZIP –∏–ª–∏ JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      } else {
        setFiles(importableFiles);
        setShowFileList(true);
        setSelectedFolder(folder);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ ZIP –∏ JSON, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º ZIP
        if (zipFiles.length > 0 && jsonFiles.length > 0) {
          Alert.alert(
            '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å ZIP-—Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
            [{ text: '–ü–æ–Ω—è—Ç–Ω–æ', style: 'default' }]
          );
        }
      }
    } catch (error) {
      console.error('Error loading files:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏');
    }
  };

  /**
   * –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
   */
  const handleImportFromFile = async (filePath: string) => {
    try {
      setIsLoading(true);

      let jsonContent: string;
      let imagesDir: string = '';
      let isZipFile = filePath.toLowerCase().endsWith('.zip');
      let extractDir = '';

      // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ZIP-—Ñ–∞–π–ª
      if (isZipFile) {
        try {
          extractDir = `${RNFS.DocumentDirectoryPath}/WineTasting_Import_${new Date().getTime()}`;
          const extractResult = await extractZipArchive(filePath, extractDir);
          jsonContent = await RNFS.readFile(extractResult.jsonPath, 'utf8');
          imagesDir = extractResult.imagesDir;
        } catch (zipError) {
          console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ZIP:', zipError);
          Alert.alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤');
          setIsLoading(false);
          return;
        }
      } else {
        // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º JSON-—Ñ–∞–π–ª
        jsonContent = await RNFS.readFile(filePath, 'utf8');
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è JSON-—Ñ–∞–π–ª
        imagesDir = filePath.substring(0, filePath.lastIndexOf('/')) + '/exported_images';
      }

      let parsedData;
      try {
        parsedData = JSON.parse(jsonContent);
      } catch (parseError) {
        Alert.alert('–û—à–∏–±–∫–∞', '–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-—Ñ–æ—Ä–º–∞—Ç');
        setIsLoading(false);
        return;
      }

      if (Array.isArray(parsedData)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if (parsedData.length > 0 &&
            typeof parsedData[0] === 'object' &&
            parsedData[0] !== null &&
            'wineName' in parsedData[0] &&
            'wineryName' in parsedData[0]) {

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
          for (let i = 0; i < parsedData.length; i++) {
            const record = parsedData[i];
            console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ ${i + 1}/${parsedData.length}: ${record.wineName}`);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ 4 –ø–æ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imageFields = ['bottlePhoto', 'labelPhoto', 'backLabelPhoto', 'plaquePhoto'];

            for (const field of imageFields) {
              if (record[field] && typeof record[field] === 'string' && record[field].startsWith('exported_images/')) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                const imagePath = `${imagesDir}/${record[field].replace('exported_images/', '')}`;
                const imageExists = await RNFS.exists(imagePath);
                console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${field}: ${imagePath}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${imageExists}`);

                if (imageExists) {
                  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                  const imageFileName = record[field].split('/').pop() || '';
                  const appImagesDir = `${RNFS.DocumentDirectoryPath}/images`;

                  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                  try {
                    const dirExists = await RNFS.exists(appImagesDir);
                    if (!dirExists) {
                      await RNFS.mkdir(appImagesDir);
                      console.log('–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', appImagesDir);
                    }
                  } catch (mkdirError) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', mkdirError);
                  }

                  const newImagePath = `${appImagesDir}/${imageFileName}`;
                  try {
                    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await RNFS.copyFile(imagePath, newImagePath);
                    console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${newImagePath}`);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å file:// –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                    parsedData[i][field] = `file://${newImagePath}`;
                  } catch (copyError) {
                    console.error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${field}:`, copyError);
                    // –ï—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
                    parsedData[i][field] = '';
                  }
                } else {
                  console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);
                  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
                  parsedData[i][field] = '';
                }
              }
            }
          }

          const currentRecords = WineRecordService.getRecords();

          // –û–ø—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞: –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å
          Alert.alert(
            '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
            `–ù–∞–π–¥–µ–Ω–æ ${parsedData.length} –∑–∞–ø–∏—Å–µ–π. –ö–∞–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ?`,
            [
              {
                text: '–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ',
                onPress: () => {
                  WineRecordService.importRecords(JSON.stringify(parsedData));
                  Alert.alert('–£—Å–ø–µ—Ö', `–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${parsedData.length} –∑–∞–ø–∏—Å–µ–π`);
                  setShowFileList(false);
                  setShowFolderList(false);
                  setSelectedFolder(null);
                  setIsLoading(false);

                  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª ZIP
                  if (extractDir) {
                    RNFS.unlink(extractDir)
                      .catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', err));
                  }
                },
              },
              {
                text: '–î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º',
                onPress: () => {
                  const newRecords = currentRecords.concat(parsedData);
                  WineRecordService.importRecords(JSON.stringify(newRecords));
                  Alert.alert('–£—Å–ø–µ—Ö', `–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${newRecords.length}`);
                  setShowFileList(false);
                  setShowFolderList(false);
                  setSelectedFolder(null);
                  setIsLoading(false);

                  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª ZIP
                  if (extractDir) {
                    RNFS.unlink(extractDir)
                      .catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', err));
                  }
                },
              },
              {
                text: '–û—Ç–º–µ–Ω–∞',
                style: 'cancel',
                onPress: () => {
                  setIsLoading(false);

                  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª ZIP
                  if (extractDir) {
                    RNFS.unlink(extractDir)
                      .catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', err));
                  }
                },
              },
            ]
          );
        } else {
          Alert.alert('–û—à–∏–±–∫–∞', '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
          setIsLoading(false);

          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª ZIP
          if (extractDir) {
            RNFS.unlink(extractDir)
              .catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', err));
          }
        }
      } else {
        Alert.alert('–û—à–∏–±–∫–∞', '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π');
        setIsLoading(false);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª ZIP
        if (extractDir) {
          RNFS.unlink(extractDir)
            .catch(err => console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', err));
        }
      }
    } catch (error) {
      console.error('Error importing file:', error);
      Alert.alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
      setIsLoading(false);
    }
  };

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞
   */
  const resetSelections = () => {
    setShowFileList(false);
    setShowFolderList(false);
    setSelectedFolder(null);
    setFiles([]);
  };

  return (
    <SafeAreaView style={styles.container}>
      <Logo />
      <Text style={styles.header}>–≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</Text>

      <View style={styles.buttonContainer}>
        <Button
          title="–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"
          onPress={handleExportWithPhotos}
          color="#3498DB"
          disabled={isLoading}
        />
      </View>

      <View style={styles.buttonContainer}>
        <Button
          title="–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
          onPress={handleExportSelected}
          color="#2ECC71"
          disabled={isLoading}
        />
      </View>

      <View style={styles.buttonContainer}>
        <Button
          title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
          onPress={handleSelectFolder}
          color="#F39C12"
          disabled={isLoading}
        />
      </View>

      {/* –ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
      {isLoading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#3498DB" />
          <Text style={styles.loadingText}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</Text>
        </View>
      )}

      {/* –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ */}
      {showFolderList && !showFileList && !isLoading && (
        <FolderListView
          folders={folders}
          onFolderSelect={handleLoadFilesFromFolder}
          onCancel={() => setShowFolderList(false)}
        />
      )}

      {/* –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
      {showFileList && !isLoading && (
        <FileListView
          files={files}
          selectedFolder={selectedFolder}
          onFileSelect={handleImportFromFile}
          onBack={() => {
            setShowFileList(false);
            setSelectedFolder(null);
          }}
          onCancel={resetSelections}
        />
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    padding: 16,
  },
  header: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  subHeader: {
    fontSize: 18,
    fontWeight: '600',
    marginVertical: 10,
    textAlign: 'center',
  },
  importHint: {
    fontSize: 14,
    fontStyle: 'italic',
    color: '#666',
    textAlign: 'center',
    marginBottom: 10,
  },
  buttonContainer: {
    marginVertical: 10,
  },
  loadingContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  folderListContainer: {
    flex: 1,
    marginTop: 20,
    borderTopWidth: 1,
    borderColor: '#CCCCCC',
    paddingTop: 10,
  },
  folderItem: {
    paddingVertical: 10,
    paddingHorizontal: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#CCCCCC',
  },
  folderName: {
    fontSize: 16,
  },
  fileListContainer: {
    flex: 1,
    marginTop: 20,
    borderTopWidth: 1,
    borderColor: '#CCCCCC',
    paddingTop: 10,
  },
  fileItem: {
    paddingVertical: 10,
    paddingHorizontal: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#CCCCCC',
  },
  zipFileItem: {
    backgroundColor: '#E8F4FD',
    borderLeftWidth: 3,
    borderLeftColor: '#3498DB',
  },
  fileName: {
    fontSize: 16,
  },
  zipFileName: {
    fontWeight: 'bold',
    color: '#2980B9',
  },
});

export default ExportImportScreen;
